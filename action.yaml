name: 'ArgoCD Sync'
description: 'This action will user the ArgoCD CLI to sync an application with kubernetes.'
author: Chris Tallman
branding:
  icon: 'user'
  color: 'red'
inputs:
  argocd-http-server:  # id of input
    description: 'ArgoCD http Server'
    required: true
  argocd-grpc-server:  # id of input
    description: 'ArgoCD GRPC Server'
    required: false
  argocd-token:  # id of input
    description: 'ArgoCD Token'
    required: true
  application:  # id of input
    description: 'Application Name'
    required: true
  restart-deployments:  # id of input
    description: 'Restart Deployments'
    required: true
runs:
  using: "composite"
  steps:
    - id: install-argocd
      name: Install ArgoCD CLI
      shell: bash
      env:
        ARGOCD_SERVER: ${{ inputs.argocd-http-server }}
      run: |
        if ! command -v argocd &> /dev/null
        then
          curl -sSL -o /usr/local/bin/argocd https://${ARGOCD_SERVER}/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
        fi
    - id: set-argocd-server
      name: Set ArgoCD Server
      shell: bash
      env:
        ARGOCD_HTTP_SERVER: ${{ inputs.argocd-http-server }}
        ARGOCD_GRPC_SERVER: ${{ inputs.argocd-grpc-server }}
      run: |
        if [ -z "$ARGOCD_GRPC_SERVER" ]
        then
          echo "ARGOCD_SERVER=$ARGOCD_HTTP_SERVER" >> $GITHUB_ENV
        else
          echo "ARGOCD_SERVER=$ARGOCD_GRPC_SERVER" >> $GITHUB_ENV
        fi
    - id: sync-application
      name: Sync Application
      shell: bash
      env:
        ARGOCD_AUTH_TOKEN: ${{ inputs.argocd-token }}
        ARGOCD_APP_NAME: ${{ inputs.application }}
        RESTART_DEPLOYMENTS: ${{ inputs.restart-deployments }}
      run: |
        argocd app get $ARGOCD_APP_NAME --hard-refresh --loglevel debug
        argocd app sync --prune $ARGOCD_APP_NAME --loglevel debug
        if [ "$(echo "$RESTART_DEPLOYMENTS" | tr '[:upper:]' '[:lower:]')" = "true" ]
        then
          appjson="$(argocd app get argocd/$ARGOCD_APP_NAME -o json)"
          deployments="$(echo $appjson | jq '.status.resources[] | select(select(.kind | contains("Deployment")).name | . != "redis").name' | sed 's/"//g')"
          for deployment in $deployments ; do argocd app actions run $ARGOCD_APP_NAME restart --kind Deployment --resource-name $deployment --loglevel debug ; echo "=====" ; done
        fi
